{
  "stats": {
    "suites": 6,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-13T08:38:26.552Z",
    "end": "2025-06-13T08:41:04.719Z",
    "duration": 158167,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "237ad755-3614-441e-97ef-eb0293f9bf34",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Features\\Features.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Features\\Features.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
          "title": "Rebet and reset bet are working correctly",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check that all of types of bets are displayed after rebetting",
              "fullTitle": "Rebet and reset bet are working correctly Should check that all of types of bets are displayed after rebetting",
              "timedOut": null,
              "duration": 31652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(36);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.dozensButtons[0].list[0].emit('pointerdown'); // dozen 1\n  scene.gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown'); // dozen 2\n  scene.gameContainer.stakeSelector.dozensButtons[2].list[0].emit('pointerdown'); // dozen 3\n  scene.gameContainer.stakeSelector.evenOrOddButtons[0].emit('pointerdown'); // even\n  scene.gameContainer.stakeSelector.evenOrOddButtons[1].emit('pointerdown'); // odd\n  scene.gameContainer.stakeSelector.highOrLowButtons[0].emit('pointerdown'); // low\n  scene.gameContainer.stakeSelector.highOrLowButtons[1].emit('pointerdown'); // high\n  scene.gameContainer.stakeSelector.redOrBlackButtons[0].list[0].emit('pointerdown'); // red\n  scene.gameContainer.stakeSelector.redOrBlackButtons[1].list[0].emit('pointerdown'); // black\n  scene.gameContainer.stakeSelector.list[1].list[0].emit('pointerdown'); // straight\n  scene.gameContainer.stakeSelector.list[37].emit('pointerdown'); // split\n  scene.gameContainer.stakeSelector.streetButtons[1].emit('pointerdown'); // street\n  scene.gameContainer.stakeSelector.cornerButtons[3].emit('pointerdown'); // corner\n  scene.gameContainer.stakeSelector.sixLineButtons[0].emit('pointerdown'); // six line\n  scene.gameContainer.stakeSelector.columnButtons[0].list[0].emit('pointerdown'); // column 1\n  scene.gameContainer.stakeSelector.columnButtons[1].list[0].emit('pointerdown'); // column 2\n  scene.gameContainer.stakeSelector.columnButtons[2].list[0].emit('pointerdown'); // column 3\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  expect(win_banner || no_win_banner).to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(100000);\n});\ncy.window().should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet).to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(1);\n  expect(chip[1].stakeType).to.include('dozen');\n  expect(chip[1].buttonId).to.equal(2);\n  expect(chip[1].bet).to.equal(100);\n  expect(chip[2].stakeType).to.include('dozen');\n  expect(chip[2].buttonId).to.equal(3);\n  expect(chip[3].stakeType).to.include('even_or_odd');\n  expect(chip[3].buttonId).to.equal(0);\n  expect(chip[4].stakeType).to.include('even_or_odd');\n  expect(chip[4].buttonId).to.equal(1);\n  expect(chip[5].stakeType).to.include('high_or_low');\n  expect(chip[5].buttonId).to.equal(1);\n  expect(chip[6].stakeType).to.include('high_or_low');\n  expect(chip[6].buttonId).to.equal(0);\n  expect(chip[7].stakeType).to.include('red_or_black');\n  expect(chip[7].buttonId).to.equal(0);\n  expect(chip[8].stakeType).to.include('red_or_black');\n  expect(chip[8].buttonId).to.equal(1);\n  expect(chip[9].stakeType).to.include('straight');\n  expect(chip[9].buttonId).to.equal(1);\n  expect(chip[10].stakeType).to.include('split');\n  expect(chip[10].buttonId).to.equal(1);\n  expect(chip[11].stakeType).to.include('street');\n  expect(chip[11].buttonId).to.equal(2);\n  expect(chip[12].stakeType).to.include('corner');\n  expect(chip[12].buttonId).to.equal(4);\n  expect(chip[13].stakeType).to.include('six_line');\n  expect(chip[13].buttonId).to.equal(1);\n  expect(chip[14].stakeType).to.include('column');\n  expect(chip[14].buttonId).to.equal(1);\n  expect(chip[15].stakeType).to.include('column');\n  expect(chip[15].buttonId).to.equal(2);\n  expect(chip[16].stakeType).to.include('column');\n  expect(chip[16].buttonId).to.equal(3);\n});",
              "err": {},
              "uuid": "5b5a0145-2079-479f-ba75-a07fff13b02c",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reset bet is working correctly",
              "fullTitle": "Rebet and reset bet are working correctly Reset bet is working correctly",
              "timedOut": null,
              "duration": 2575,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 10000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips).have.length(0);\n});",
              "err": {},
              "uuid": "78551844-377b-4529-aa64-dc0fbd85906d",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet works correctly after the second spin with a different stake",
              "fullTitle": "Rebet and reset bet are working correctly Rebet works correctly after the second spin with a different stake",
              "timedOut": null,
              "duration": 15170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(no_win_banner || win_banner, 'result banner is displayed').to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(100000);\n});\ncy.wait(3300);\ncy.window().should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet, 'rebet button is visible').to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(2);\n});",
              "err": {},
              "uuid": "a20672d9-8e0d-4b44-bfcb-3a914eec977f",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebetting on Race Track View switches the table view to standart",
              "fullTitle": "Rebet and reset bet are working correctly Rebetting on Race Track View switches the table view to standart",
              "timedOut": null,
              "duration": 2052,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(1200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(2);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'isRaceTable is false').to.be.false;\n});",
              "err": {},
              "uuid": "dfb7f303-351e-4084-9fb9-956588dc3791",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet and reset bet are working correctly in Race Track",
              "fullTitle": "Rebet and reset bet are working correctly Rebet and reset bet are working correctly in Race Track",
              "timedOut": null,
              "duration": 19251,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(10);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.wait(100);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const race_track = scene.gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, \"Switched to Race Track\").to.be.true;\n});\ncy.wait(1000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.raceButtons[1].emit('pointerdown');\n});\ncy.window().then(win => {\n  cy.wait(3000);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const noWin_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(noWin_banner || win_banner, \"banner is displayed\").to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(1000);\n});\ncy.wait(3000);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet, 'rebet button is visible').to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(14);\n  expect(chip[1].buttonId).to.equal(20);\n  expect(chip[2].buttonId).to.equal(1);\n  expect(chip[3].buttonId).to.equal(33);\n  expect(chip[4].buttonId).to.equal(16);\n});",
              "err": {},
              "uuid": "418e33d2-d549-475a-bcae-d0fe4a40801a",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reset bet is working correctly",
              "fullTitle": "Rebet and reset bet are working correctly Reset bet is working correctly",
              "timedOut": null,
              "duration": 5039,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(3000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});\ncy.wait(2000);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips).have.length(0);\n});",
              "err": {},
              "uuid": "bd77be0f-730d-4a87-a021-684255ee161a",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet works correctly after the second spin with a different stake",
              "fullTitle": "Rebet and reset bet are working correctly Rebet works correctly after the second spin with a different stake",
              "timedOut": null,
              "duration": 17489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.raceButtons[2].emit('pointerdown');\n  cy.wait(50);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(no_win_banner || win_banner, 'banner is displayed').to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(1000);\n});\ncy.wait(3000);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet).to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(17);\n  expect(chip[1].buttonId).to.equal(25);\n  expect(chip[2].buttonId).to.equal(2);\n  expect(chip[3].buttonId).to.equal(21);\n  expect(chip[4].buttonId).to.equal(4);\n});",
              "err": {},
              "uuid": "c2f8dc95-b7da-4b76-bcc7-17d40bfde5e1",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebetting on Table View switches the Table view to Race Track",
              "fullTitle": "Rebet and reset bet are working correctly Rebetting on Table View switches the Table view to Race Track",
              "timedOut": null,
              "duration": 2110,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(1200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(17);\n  expect(chip[1].buttonId).to.equal(25);\n  expect(chip[2].buttonId).to.equal(2);\n  expect(chip[3].buttonId).to.equal(21);\n  expect(chip[4].buttonId).to.equal(4);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'isRaceTable is true').to.be.true;\n});",
              "err": {},
              "uuid": "e105d990-7cab-48dd-bf1f-70644a158757",
              "parentUUID": "7774b61f-fd47-48eb-b9d2-94e0e6e2ad02",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b5a0145-2079-479f-ba75-a07fff13b02c",
            "78551844-377b-4529-aa64-dc0fbd85906d",
            "a20672d9-8e0d-4b44-bfcb-3a914eec977f",
            "dfb7f303-351e-4084-9fb9-956588dc3791",
            "418e33d2-d549-475a-bcae-d0fe4a40801a",
            "bd77be0f-730d-4a87-a021-684255ee161a",
            "c2f8dc95-b7da-4b76-bcc7-17d40bfde5e1",
            "e105d990-7cab-48dd-bf1f-70644a158757"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 95338,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14739268-90e0-4564-ab2e-ecc8192c0efc",
          "title": "multiply works correctly",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should multiply 0.50 stake",
              "fullTitle": "multiply works correctly should multiply 0.50 stake",
              "timedOut": null,
              "duration": 7818,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 15000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'isRaceTable is false').to.be.false;\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.active).to.be.true;\n});\ncy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.list[0].list[0].emit('pointerdown');\n});\ncy.wait(800);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const total_bet = win.game.scene.scenes[1].gameContainer.betPanel.list[9].text;\n  expect(total_bet).to.include('1.00');\n});\ncy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const total_bet = win.game.scene.scenes[1].gameContainer.betPanel.list[9].text;\n  expect(total_bet).to.include('2.00');\n});\ncy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const total_bet = win.game.scene.scenes[1].gameContainer.betPanel.list[9].text;\n  expect(total_bet).to.include('4.00');\n});",
              "err": {},
              "uuid": "2f1a7b33-2381-4e0f-8dd0-3240cf609f73",
              "parentUUID": "14739268-90e0-4564-ab2e-ecc8192c0efc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Multiply works correctly in Race Track",
              "fullTitle": "multiply works correctly Multiply works correctly in Race Track",
              "timedOut": null,
              "duration": 4888,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(100);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isSwitching, 'Switched to RaceTable').to.be.false;\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'Switched to RaceTable').to.be.true;\n});\ncy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.raceButtons[0].emit('pointerdown');\n});\ncy.wait(800);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const total_bet = win.game.scene.scenes[1].gameContainer.betPanel.list[9].text;\n  expect(total_bet).to.include('5.00');\n});\ncy.wait(1200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const total_bet = win.game.scene.scenes[1].gameContainer.betPanel.list[9].text;\n  expect(total_bet).to.include('10.00');\n});\n// cy.wait(400)\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});",
              "err": {},
              "uuid": "c9bda392-b533-4067-bff3-ea1da9ecc246",
              "parentUUID": "14739268-90e0-4564-ab2e-ecc8192c0efc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f1a7b33-2381-4e0f-8dd0-3240cf609f73",
            "c9bda392-b533-4067-bff3-ea1da9ecc246"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12706,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e5429a77-48ee-4e66-a56b-330fcad22f6c",
          "title": "Chips from Race Track view are displayed in Table View when entering it",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "bet 0 in Race Track is 15, 32, 0, 26, 3 in Table View)",
              "fullTitle": "Chips from Race Track view are displayed in Table View when entering it bet 0 in Race Track is 15, 32, 0, 26, 3 in Table View)",
              "timedOut": null,
              "duration": 1071,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(300);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const race_track = win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, 'Table View').to.be.false;\n});\ncy.wait(200);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].buttonId).to.equal(15);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[1].buttonId).to.equal(15);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[2].buttonId).to.equal(15);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[3].buttonId).to.equal(15);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[4].buttonId).to.equal(32);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[5].buttonId).to.equal(32);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[6].buttonId).to.equal(32);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[7].buttonId).to.equal(32);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[8].buttonId).to.equal(0);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[9].buttonId).to.equal(0);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[10].buttonId).to.equal(0);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[11].buttonId).to.equal(0);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[12].buttonId).to.equal(26);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[13].buttonId).to.equal(26);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[14].buttonId).to.equal(26);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[15].buttonId).to.equal(26);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[16].buttonId).to.equal(3);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[17].buttonId).to.equal(3);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[18].buttonId).to.equal(3);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[19].buttonId).to.equal(3);\n});",
              "err": {},
              "uuid": "c0ce16fd-ab07-44e9-90fb-055045c26c1a",
              "parentUUID": "e5429a77-48ee-4e66-a56b-330fcad22f6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Chips from Table View reset after entering Race Track",
              "fullTitle": "Chips from Race Track view are displayed in Table View when entering it Chips from Table View reset after entering Race Track",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(100);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const race_track = win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, 'Race Track View').to.be.true;\n});\ncy.window().should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips).to.have.length(0);\n});",
              "err": {},
              "uuid": "76a29089-683b-479e-a736-42d4a599067e",
              "parentUUID": "e5429a77-48ee-4e66-a56b-330fcad22f6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c0ce16fd-ab07-44e9-90fb-055045c26c1a",
            "76a29089-683b-479e-a736-42d4a599067e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1259,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
          "title": "chip conversion",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "five 0.10 chips convert to 0.50",
              "fullTitle": "chip conversion five 0.10 chips convert to 0.50",
              "timedOut": null,
              "duration": 2219,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const race_track = win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, 'Table View').to.be.false;\n});\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[1].list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\ncy.wait(700);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  cy.window({\n    timeout: 10000\n  }).should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 0.50').to.equal(50);\n  });\n});",
              "err": {},
              "uuid": "62723b98-f4d6-404d-920d-770dc8e6456d",
              "parentUUID": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "five 0.10 chips on 0.50 convert to 1",
              "fullTitle": "chip conversion five 0.10 chips on 0.50 convert to 1",
              "timedOut": null,
              "duration": 157,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  cy.window({\n    timeout: 10000\n  }).should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 1').to.equal(100);\n  });\n});",
              "err": {},
              "uuid": "b7431683-cbf7-4c71-a6af-cd8a69876b01",
              "parentUUID": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "two 0.50 chips convert to 1 and there are two 1 chips in the stack",
              "fullTitle": "chip conversion two 0.50 chips convert to 1 and there are two 1 chips in the stack",
              "timedOut": null,
              "duration": 193,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[2].list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_1\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  cy.window({\n    timeout: 10000\n  }).should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, '[0] Bet is 1').to.equal(100);\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[1].bet, '[1] Bet is 1').to.equal(100);\n  });\n});",
              "err": {},
              "uuid": "40eebdbe-9a3b-478d-b43e-05bf01bdf39c",
              "parentUUID": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "three 1 chips on two 1 chips convert to 5",
              "fullTitle": "chip conversion three 1 chips on two 1 chips convert to 5",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[3].list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  cy.window({\n    timeout: 10000\n  }).should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 5').to.equal(500);\n  });\n});",
              "err": {},
              "uuid": "b8cb4fe8-61a2-4c25-9c05-5660ac1a4edf",
              "parentUUID": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "two 5 chips convert to 10",
              "fullTitle": "chip conversion two 5 chips convert to 10",
              "timedOut": null,
              "duration": 148,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[4].list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_3\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.baseButtonsElements[11].list[0].emit('pointerdown');\n  cy.window({\n    timeout: 10000\n  }).should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 10').to.equal(1000);\n  });\n});",
              "err": {},
              "uuid": "9e34d729-de96-49e2-9486-b3b36336fc89",
              "parentUUID": "15cd21b2-c2f2-4702-9f1f-83553658e3c4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "62723b98-f4d6-404d-920d-770dc8e6456d",
            "b7431683-cbf7-4c71-a6af-cd8a69876b01",
            "40eebdbe-9a3b-478d-b43e-05bf01bdf39c",
            "b8cb4fe8-61a2-4c25-9c05-5660ac1a4edf",
            "9e34d729-de96-49e2-9486-b3b36336fc89"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2918,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
          "title": "chip conversion in Race Track",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "RACE TRACK five 0.10 chips convert to 0.50",
              "fullTitle": "chip conversion in Race Track RACE TRACK five 0.10 chips convert to 0.50",
              "timedOut": null,
              "duration": 3014,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(100);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const race_track = scene.gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, 'isRaceTable').to.be.true;\n});\ncy.wait(1000);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[1].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\ncy.wait(700);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  cy.window().should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 0.50').to.equal(50);\n  });\n});",
              "err": {},
              "uuid": "9ba200e0-57f3-48bd-8ad5-4a66189d0f14",
              "parentUUID": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RACE TRACK five 0.10 chips on 0.50 convert to 1)",
              "fullTitle": "chip conversion in Race Track RACE TRACK five 0.10 chips on 0.50 convert to 1)",
              "timedOut": null,
              "duration": 423,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  cy.window().should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 1').to.equal(100);\n  });\n});",
              "err": {},
              "uuid": "b7b9ce48-4443-4609-8d7d-abede488f9f3",
              "parentUUID": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RACE TRACK two 0.50 chips convert to 1 and there are two 1 chips in the stack)",
              "fullTitle": "chip conversion in Race Track RACE TRACK two 0.50 chips convert to 1 and there are two 1 chips in the stack)",
              "timedOut": null,
              "duration": 241,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[2].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_1\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  cy.window().should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, '[0] Bet is 1').to.equal(100);\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[1].bet, '[1] Bet is 1').to.equal(100);\n  });\n});",
              "err": {},
              "uuid": "c6f909f2-420c-4353-bb90-cb8a5138e28e",
              "parentUUID": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RACE TRACK three 1 chips on two 1 chips convert to 5)",
              "fullTitle": "chip conversion in Race Track RACE TRACK three 1 chips on two 1 chips convert to 5)",
              "timedOut": null,
              "duration": 321,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[3].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  cy.window().should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 5').to.equal(500);\n  });\n});",
              "err": {},
              "uuid": "72eea7f3-ecc6-41e4-af49-afae914d2fec",
              "parentUUID": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "RACE TRACK two 5 chips convert to 10)",
              "fullTitle": "chip conversion in Race Track RACE TRACK two 5 chips convert to 10)",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[4].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_3\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.raceButtons[20].emit('pointerdown');\n  cy.window().should(win => {\n    expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips[0].bet, 'Bet is 10').to.equal(1000);\n  });\n});",
              "err": {},
              "uuid": "1af684c5-a49e-4092-83da-5edddf5d6630",
              "parentUUID": "db3654e5-96e1-48af-9d4f-8a2bf823be4e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ba200e0-57f3-48bd-8ad5-4a66189d0f14",
            "b7b9ce48-4443-4609-8d7d-abede488f9f3",
            "c6f909f2-420c-4353-bb90-cb8a5138e28e",
            "72eea7f3-ecc6-41e4-af49-afae914d2fec",
            "1af684c5-a49e-4092-83da-5edddf5d6630"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4202,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c644a73b-1f08-412d-be98-5664bfb59939",
          "title": "Reward History displays winning numbers",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "5 numbers are displayed, and 6th/2nd numbers rewrite 5th/1st)",
              "fullTitle": "Reward History displays winning numbers 5 numbers are displayed, and 6th/2nd numbers rewrite 5th/1st)",
              "timedOut": null,
              "duration": 37696,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(300);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const race_track = win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, 'Table View').to.be.false;\n});\ncy.intercept('startgame', {\n  fixture: 'only_one_bonus_spin_roulette.json'\n}).as('startGame');\ncy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.list[0].list[0].emit('pointerdown');\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const chip_0 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[0].list[1].text;\n  const chip_1 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[1].list[1].text;\n  const chip_2 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[2].list[1].text;\n  const chip_3 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[3].list[1].text;\n  const chip_4 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[4].list[1].text;\n  expect(chip_0).to.equal('35');\n  expect(chip_1).to.equal('35');\n  expect(chip_2).to.equal('9');\n  expect(chip_3).to.equal('9');\n  expect(chip_4).to.equal('1');\n  expect(win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[4].list[2].visible, 'Helmet icon is displayed').to.be.true;\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(win_banner, 'Win banner is displayed').to.be.true;\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('NO WIN');\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(win_banner, 'Win banner after Bonus Round is displayed').to.be.true;\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.visible, 'Return to the table').to.be.true;\n});\ncy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.list[0].list[0].emit('pointerdown');\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const chip_0 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[0].list[1].text;\n  const chip_1 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[1].list[1].text;\n  const chip_2 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[2].list[1].text;\n  const chip_3 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[3].list[1].text;\n  const chip_4 = win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[4].list[1].text;\n  expect(chip_0).to.equal('35');\n  expect(chip_1).to.equal('9');\n  expect(chip_2).to.equal('9');\n  expect(chip_3).to.equal('1');\n  expect(chip_4).to.equal('1');\n  expect(win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[4].list[2].visible, 'Helmet icon is displayed').to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.bottomPanel.historyItems[3].list[2].visible, 'Helmet icon is displayed').to.be.true;\n});",
              "err": {},
              "uuid": "aef8e0d4-7d94-4c5e-855b-61c8081edada",
              "parentUUID": "c644a73b-1f08-412d-be98-5664bfb59939",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aef8e0d4-7d94-4c5e-855b-61c8081edada"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 37696,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}