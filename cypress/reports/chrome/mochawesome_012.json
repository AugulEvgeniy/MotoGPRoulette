{
  "stats": {
    "suites": 1,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-12T06:55:33.832Z",
    "end": "2025-06-12T06:57:10.968Z",
    "duration": 97136,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c1ceb7c6-b6fe-4ee7-8559-bad076c3434e",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Features\\it.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Features\\it.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7acbb867-3587-4b24-9d12-43458cd65132",
          "title": "Rebet and reset bet are working correctly",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check that all of types of bets are displayed after rebetting",
              "fullTitle": "Rebet and reset bet are working correctly Should check that all of types of bets are displayed after rebetting",
              "timedOut": null,
              "duration": 30822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(36);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.dozensButtons[0].list[0].emit('pointerdown'); // dozen 1\n  scene.gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown'); // dozen 2\n  scene.gameContainer.stakeSelector.dozensButtons[2].list[0].emit('pointerdown'); // dozen 3\n  scene.gameContainer.stakeSelector.evenOrOddButtons[0].emit('pointerdown'); // even\n  scene.gameContainer.stakeSelector.evenOrOddButtons[1].emit('pointerdown'); // odd\n  scene.gameContainer.stakeSelector.highOrLowButtons[0].emit('pointerdown'); // low\n  scene.gameContainer.stakeSelector.highOrLowButtons[1].emit('pointerdown'); // high\n  scene.gameContainer.stakeSelector.redOrBlackButtons[0].list[0].emit('pointerdown'); // red\n  scene.gameContainer.stakeSelector.redOrBlackButtons[1].list[0].emit('pointerdown'); // black\n  scene.gameContainer.stakeSelector.list[1].list[0].emit('pointerdown'); // straight\n  scene.gameContainer.stakeSelector.list[37].emit('pointerdown'); // split\n  scene.gameContainer.stakeSelector.streetButtons[1].emit('pointerdown'); // street\n  scene.gameContainer.stakeSelector.cornerButtons[3].emit('pointerdown'); // corner\n  scene.gameContainer.stakeSelector.sixLineButtons[0].emit('pointerdown'); // six line\n  scene.gameContainer.stakeSelector.columnButtons[0].list[0].emit('pointerdown'); // column 1\n  scene.gameContainer.stakeSelector.columnButtons[1].list[0].emit('pointerdown'); // column 2\n  scene.gameContainer.stakeSelector.columnButtons[2].list[0].emit('pointerdown'); // column 3\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  expect(win_banner || no_win_banner).to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(100000);\n});\ncy.window().should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet).to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(1);\n  expect(chip[1].stakeType).to.include('dozen');\n  expect(chip[1].buttonId).to.equal(2);\n  expect(chip[1].bet).to.equal(100);\n  expect(chip[2].stakeType).to.include('dozen');\n  expect(chip[2].buttonId).to.equal(3);\n  expect(chip[3].stakeType).to.include('even_or_odd');\n  expect(chip[3].buttonId).to.equal(0);\n  expect(chip[4].stakeType).to.include('even_or_odd');\n  expect(chip[4].buttonId).to.equal(1);\n  expect(chip[5].stakeType).to.include('high_or_low');\n  expect(chip[5].buttonId).to.equal(1);\n  expect(chip[6].stakeType).to.include('high_or_low');\n  expect(chip[6].buttonId).to.equal(0);\n  expect(chip[7].stakeType).to.include('red_or_black');\n  expect(chip[7].buttonId).to.equal(0);\n  expect(chip[8].stakeType).to.include('red_or_black');\n  expect(chip[8].buttonId).to.equal(1);\n  expect(chip[9].stakeType).to.include('straight');\n  expect(chip[9].buttonId).to.equal(1);\n  expect(chip[10].stakeType).to.include('split');\n  expect(chip[10].buttonId).to.equal(1);\n  expect(chip[11].stakeType).to.include('street');\n  expect(chip[11].buttonId).to.equal(2);\n  expect(chip[12].stakeType).to.include('corner');\n  expect(chip[12].buttonId).to.equal(4);\n  expect(chip[13].stakeType).to.include('six_line');\n  expect(chip[13].buttonId).to.equal(1);\n  expect(chip[14].stakeType).to.include('column');\n  expect(chip[14].buttonId).to.equal(1);\n  expect(chip[15].stakeType).to.include('column');\n  expect(chip[15].buttonId).to.equal(2);\n  expect(chip[16].stakeType).to.include('column');\n  expect(chip[16].buttonId).to.equal(3);\n});",
              "err": {},
              "uuid": "423ae916-59b3-4d4a-8b6c-200138a7ee1a",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reset bet is working correctly",
              "fullTitle": "Rebet and reset bet are working correctly Reset bet is working correctly",
              "timedOut": null,
              "duration": 2543,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 10000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips).have.length(0);\n});",
              "err": {},
              "uuid": "289d4de7-d5ef-48b8-9caa-250c7a82c5c2",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet works correctly after the second spin with a different stake",
              "fullTitle": "Rebet and reset bet are working correctly Rebet works correctly after the second spin with a different stake",
              "timedOut": null,
              "duration": 15135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(no_win_banner || win_banner, 'result banner is displayed').to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(100000);\n});\ncy.wait(3300);\ncy.window().should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet, 'rebet button is visible').to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(2);\n});",
              "err": {},
              "uuid": "9d242b53-18ed-49d4-97da-c99d9a9eeaf2",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebetting on Race Track View switches the table view to standart",
              "fullTitle": "Rebet and reset bet are working correctly Rebetting on Race Track View switches the table view to standart",
              "timedOut": null,
              "duration": 2031,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(1200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('dozen');\n  expect(chip[0].buttonId).to.equal(2);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'isRaceTable is false').to.be.false;\n});",
              "err": {},
              "uuid": "81fce35d-10e5-4d8f-960c-1e0e2a0af821",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet and reset bet are working correctly in Race Track",
              "fullTitle": "Rebet and reset bet are working correctly Rebet and reset bet are working correctly in Race Track",
              "timedOut": null,
              "duration": 19156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.wait(500);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(10);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.wait(100);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const race_track = scene.gameContainer.stakeSelector.isRaceTable;\n  expect(race_track, \"Switched to Race Track\").to.be.true;\n});\ncy.wait(1000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.raceButtons[1].emit('pointerdown');\n});\ncy.window().then(win => {\n  cy.wait(3000);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 30000\n}).should(win => {\n  const noWin_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(noWin_banner || win_banner, \"banner is displayed\").to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(1000);\n});\ncy.wait(3000);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet, 'rebet button is visible').to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(14);\n  expect(chip[1].buttonId).to.equal(20);\n  expect(chip[2].buttonId).to.equal(1);\n  expect(chip[3].buttonId).to.equal(33);\n  expect(chip[4].buttonId).to.equal(16);\n});",
              "err": {},
              "uuid": "6cec1e70-164b-44e1-a7d5-20580738303e",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Reset bet is working correctly",
              "fullTitle": "Rebet and reset bet are working correctly Reset bet is working correctly",
              "timedOut": null,
              "duration": 5043,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(3000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.emit('pointerdown');\n});\ncy.wait(2000);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.chips).have.length(0);\n});",
              "err": {},
              "uuid": "41feaee6-2701-4ad7-ac46-4610ec0bcbf9",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebet works correctly after the second spin with a different stake",
              "fullTitle": "Rebet and reset bet are working correctly Rebet works correctly after the second spin with a different stake",
              "timedOut": null,
              "duration": 17414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.raceButtons[2].emit('pointerdown');\n  cy.wait(50);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const no_win_banner = win.game.scene.scenes[1].gameContainer.noWinBanner.visible;\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(no_win_banner || win_banner, 'banner is displayed').to.be.true;\n  expect(win.game.scene.scenes[1].gameContainer.topPanel.balance).to.not.equal(1000);\n});\ncy.wait(3000);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const rebet = win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.list[2].visible;\n  expect(rebet).to.be.true;\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(17);\n  expect(chip[1].buttonId).to.equal(25);\n  expect(chip[2].buttonId).to.equal(2);\n  expect(chip[3].buttonId).to.equal(21);\n  expect(chip[4].buttonId).to.equal(4);\n});",
              "err": {},
              "uuid": "7388a5ce-7b9d-42ac-8db0-5c7177f06ee8",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Rebetting on Table View switches the Table view to Race Track",
              "fullTitle": "Rebet and reset bet are working correctly Rebetting on Table View switches the Table view to Race Track",
              "timedOut": null,
              "duration": 2064,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.raceButton.emit('pointerdown');\n});\ncy.wait(1200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window({\n  timeout: 15000\n}).should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.stakeSelector.chips;\n  expect(chip[0].stakeType).to.include('straight');\n  expect(chip[0].buttonId).to.equal(17);\n  expect(chip[1].buttonId).to.equal(25);\n  expect(chip[2].buttonId).to.equal(2);\n  expect(chip[3].buttonId).to.equal(21);\n  expect(chip[4].buttonId).to.equal(4);\n  expect(win.game.scene.scenes[1].gameContainer.stakeSelector.isRaceTable, 'isRaceTable is true').to.be.true;\n});",
              "err": {},
              "uuid": "427258e7-1514-43a0-b45c-f45e2a1d06a7",
              "parentUUID": "7acbb867-3587-4b24-9d12-43458cd65132",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "423ae916-59b3-4d4a-8b6c-200138a7ee1a",
            "289d4de7-d5ef-48b8-9caa-250c7a82c5c2",
            "9d242b53-18ed-49d4-97da-c99d9a9eeaf2",
            "81fce35d-10e5-4d8f-960c-1e0e2a0af821",
            "6cec1e70-164b-44e1-a7d5-20580738303e",
            "41feaee6-2701-4ad7-ac46-4610ec0bcbf9",
            "7388a5ce-7b9d-42ac-8db0-5c7177f06ee8",
            "427258e7-1514-43a0-b45c-f45e2a1d06a7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 94208,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}