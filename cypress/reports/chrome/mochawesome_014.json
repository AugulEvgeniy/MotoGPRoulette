{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-17T08:07:20.216Z",
    "end": "2025-06-17T08:08:01.913Z",
    "duration": 41697,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "102f8e10-163c-4d33-9631-9dd7c4dc402b",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Spins\\1. win_lose_spin.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Spins\\1. win_lose_spin.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0e856a4-04e6-4ff0-a976-3b19e4cd22ff",
          "title": "Spins are played without issues",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "[WIN SPIN] Should check that the win banner is displayed, balance is updated, response data is correct)",
              "fullTitle": "Spins are played without issues [WIN SPIN] Should check that the win banner is displayed, balance is updated, response data is correct)",
              "timedOut": null,
              "duration": 25193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(2);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.dozensButtons[0].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown');\n  scene.gameContainer.stakeSelector.dozensButtons[2].list[0].emit('pointerdown');\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.wait('@startGame', {\n  timeout: 25000\n}).its('response.body').then(body => {\n  expect(body.gameResult.totalWinPence).to.equal(300);\n  expect(body.gameResult.stakePence, \"stakePence\").to.equal(300);\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const win_banner = scene.gameContainer.winBanner.visible;\n  expect(win_banner, \"win banner is displayed\").to.be.true;\n  expect(scene.gameContainer.topPanel.balance, \"Balance\").to.equal(100000);\n});\ncy.wait(3000);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[1].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\n// to check that the game functions after the spin",
              "err": {},
              "uuid": "746925a7-a221-45bc-b25d-cd2e5089a5e7",
              "parentUUID": "f0e856a4-04e6-4ff0-a976-3b19e4cd22ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[LOSE SPIN] Should check that no win banner is displayed, balance is updated, response data is correct)",
              "fullTitle": "Spins are played without issues [LOSE SPIN] Should check that no win banner is displayed, balance is updated, response data is correct)",
              "timedOut": null,
              "duration": 14436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.get('#open_button').click();\ncy.get('#chip').select(2);\ncy.get('#open_button').click({\n  force: true\n});\ncy.get('#set_state').click();\ncy.get('#close_button').click();\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown');\n  cy.wait(50);\n  scene.gameContainer.startGroupButtons.list[0].emit('pointerdown');\n});\ncy.wait('@startGame', {\n  timeout: 25000\n}).its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(10);\n    cy.task(\"logCatch\", {\n      message: \"âœ… Assertion Passed: stakePence is 100\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const no_win_banner = scene.gameContainer.noWinBanner.visible;\n  expect(no_win_banner).to.be.true;\n  expect(scene.gameContainer.topPanel.balance).to.equal(99990);\n});\ncy.wait(3000);\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.betPanel.list[1].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\n// to check that the game functions after the spin",
              "err": {},
              "uuid": "e7d09e1d-f54c-44de-bdff-10ac945e167d",
              "parentUUID": "f0e856a4-04e6-4ff0-a976-3b19e4cd22ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "746925a7-a221-45bc-b25d-cd2e5089a5e7",
            "e7d09e1d-f54c-44de-bdff-10ac945e167d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 39629,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}