{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-02T08:38:27.990Z",
    "end": "2025-06-02T08:39:00.784Z",
    "duration": 32794,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "749bb0e6-33ae-445e-b983-70c0e9d9d413",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Spins\\5. autospin_continues_after_bonus_feature.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Spins\\5. autospin_continues_after_bonus_feature.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1ae709e2-09f8-4d27-8add-c397287b1200",
          "title": "Autospin continues after Bonus Feature and Bonus Round is played without issues with extra spins",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check that \"Spins Left\" counter updates correctly, correct multipliers are displayed, total winnings updates correctly, autospin does not continue after Bonus Round)",
              "fullTitle": "Autospin continues after Bonus Feature and Bonus Round is played without issues with extra spins Should check that \"Spins Left\" counter updates correctly, correct multipliers are displayed, total winnings updates correctly, autospin does not continue after Bonus Round)",
              "timedOut": null,
              "duration": 30779,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.intercept('startgame', {\n  fixture: 'only_one_bonus_spin_roulette.json'\n}).as('startGame');\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const start_button = win.game.scene.scenes[1].gameContainer.list[5].list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\n// cy.get('#open_button').click()\n// cy.get('#chip').select(2)\n// cy.get('#open_button').click({force: true})\n// cy.get('#win_bonus_button')\n// cy.get('#set_state').click()\n// cy.get('#close_button').click()\ncy.window().should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_1\");\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  cy.wait(50);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.autoplayButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.list[2].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.list[7].list[0].emit('pointerdown');\n});\n// 10\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 9').to.equal('9');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 9, stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(win_banner).to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.topPanel.balance, 'Balance is updated').to.not.equal(100000);\n    cy.task(\"logCatch\", `Balance is updated`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 10000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('NO WIN');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.visible, 'No multipliers are visible').to.be.false;\n    cy.task(\"logCatch\", `No multipliers are visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '6 SPINS LEFT').to.include('6 SPINS LEFT');\n    cy.task(\"logCatch\", `6 SPINS LEFT`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(2500);\ncy.window({\n  timeout: 25000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 9').to.equal('9');\n  cy.task(\"logCatch\", `Spin count is 9`);\n});\ncy.window({\n  timeout: 25000\n}).should(win => {\n  expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 8').to.equal('8');\n  cy.task(\"logCatch\", `Spin count is 8`);\n});",
              "err": {
                "message": "CypressError: `cy.should()` failed because you invoked a command inside the callback. `cy.should()` retries the inner function, which would result in commands being added to the queue multiple times. Use `cy.then()` instead of `cy.should()`, or move any commands outside the callback function.\n\nThe command invoked was:\n\n  > `cy.task()`",
                "estack": "CypressError: `cy.should()` failed because you invoked a command inside the callback. `cy.should()` retries the inner function, which would result in commands being added to the queue multiple times. Use `cy.then()` instead of `cy.should()`, or move any commands outside the callback function.\n\nThe command invoked was:\n\n  > `cy.task()`\n    at $Cypress.commandEnqueued (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119031:68)\n    at $Cypress.listener (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:143182:17)\n    at EventEmitter.emit (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:143262:19)\n    at parent.<computed> [as emit] (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:142171:31)\n    at $Cypress.action (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:41648:21)\n    at $Cy.enqueue (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:140576:25)\n    at callback (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:140172:10)\n    at cy.<computed> [as task] (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:140205:7)\n    at Context.eval (webpack://test/./cypress/e2e/MotoGPRoulette/Spins/5. autospin_continues_after_bonus_feature.cy.js:110:15)\n    at <unknown> (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119043:17)\n    at tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.shouldFnWithCallback (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119040:66)\n    at Context.shouldFn (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119083:37)\n    at Context.should (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119202:23)\n    at <unknown> (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:145084:39)\n    at assertions (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:145332:16)\n    at tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Object.gotValue (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:6448:18)\n    at Object.gotAccum (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:6435:25)\n    at Object.tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise._settlePromiseFromHandler (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1489:31)\nFrom Your Spec Code:\n    at Context.eval (webpack://test/./cypress/e2e/MotoGPRoulette/Spins/5. autospin_continues_after_bonus_feature.cy.js:109:12)\n    at <unknown> (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119043:17)\n    at tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.shouldFnWithCallback (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119040:66)\n    at Context.shouldFn (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119083:37)\n    at Context.should (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119202:23)\n    at <unknown> (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:145084:39)",
                "diff": null
              },
              "uuid": "f112b2b3-f80e-406a-addb-0b9ce784ff65",
              "parentUUID": "1ae709e2-09f8-4d27-8add-c397287b1200",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f112b2b3-f80e-406a-addb-0b9ce784ff65"
          ],
          "pending": [],
          "skipped": [],
          "duration": 30779,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}