{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-02T08:18:22.126Z",
    "end": "2025-06-02T08:21:13.225Z",
    "duration": 171099,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3ed99029-769d-437d-9d2a-a118c830b23c",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Spins\\3. autospin.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Spins\\3. autospin.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0a57e3b5-10b8-4507-ae39-ce0e1e316973",
          "title": "Autospin is played without issues",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check that spin counter updates correctly, and autospin stops after all spins)",
              "fullTitle": "Autospin is played without issues Should check that spin counter updates correctly, and autospin stops after all spins)",
              "timedOut": null,
              "duration": 168877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.intercept('startgame').as('startGame');\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const start_button = win.game.scene.scenes[1].gameContainer.list[5].list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.window().should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_1\");\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.dozensButtons[1].list[0].emit('pointerdown');\n  cy.wait(50);\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.autoplayButton.emit('pointerdown');\n});\ncy.wait(500);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.list[2].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.list[7].list[0].emit('pointerdown');\n});\n// 10\ncy.wait('@startGame', {\n  timeout: 20000\n}).its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(300);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 9').to.equal('9');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 9, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 9').to.equal('9');\n    cy.task(\"logCatch\", `Spin count is 9`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 9\ncy.wait('@startGame', {\n  timeout: 20000\n}).its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 8').to.equal('8');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 8, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 8').to.equal('8');\n    cy.task(\"logCatch\", `Spin count is 8`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 8\ncy.wait('@startGame', {\n  timeout: 20000\n}).its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 7').to.equal('7');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 7, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 7').to.equal('7');\n    cy.task(\"logCatch\", `Spin count is 7`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 7\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 6').to.equal('6');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 6, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 6').to.equal('6');\n    cy.task(\"logCatch\", `Spin count is 6`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 6\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 5').to.equal('5');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 5, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 5').to.equal('5');\n    cy.task(\"logCatch\", `Spin count is 5`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 5\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 4').to.equal('4');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 4, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 4').to.equal('4');\n    cy.task(\"logCatch\", `Spin count is 4`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 4\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 3').to.equal('3');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 3, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 3').to.equal('3');\n    cy.task(\"logCatch\", `Spin count is 3`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 3\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 2').to.equal('2');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 2, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 2').to.equal('2');\n    cy.task(\"logCatch\", `Spin count is 2`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 2\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `stakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 1').to.equal('1');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 1, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 1').to.equal('1');\n    cy.task(\"logCatch\", `Spin count is 1`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is disabled').to.be.false;\n    cy.task(\"logCatch\", `RaceButton is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// 1\ncy.wait('@startGame').its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(50);\n    cy.task(\"logCatch\", `StakePence is 50`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 0').to.equal('0');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", `Spin count is 0, Stop Auto button is visible`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is active').to.be.true;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[1].list[3].text;\n    expect(auto_button, 'Spin count is 0').to.equal('0');\n    cy.task(\"logCatch\", 'Spin count is 0');\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is active').to.be.true;\n    cy.task(\"logCatch\", `RaceButton is active`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.multiplyButton.active, 'Multiply button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Multiply button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.startButton.active, 'Spin button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Spin button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.startGroupButtons.resetButton.active, 'Reset button is disabled').to.be.false;\n    cy.task(\"logCatch\", `Reset button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// The game works correctly after autospin\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const table = win.game.scene.scenes[1].gameContainer.stakeSelector.visible;\n  expect(table, 'The game returns to the table').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.reBetButton.active, 'Rebet button is active').to.be.true;\n    cy.task(\"logCatch\", `Rebet button is disabled`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    const auto_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.autoplayButton.list[5].text;\n    expect(auto_button, 'Stop auto button is no longer displayed').to.equal('AUTO SPIN');\n    cy.task(\"logCatch\", `Stop auto button is no longer displayed`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.tapBar.raceButton.active, 'RaceButton button is active').to.be.true;\n    cy.task(\"logCatch\", `Race Button is active`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(1000);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.list[7].list[1].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\n// to check that the game functions after the spin",
              "err": {},
              "uuid": "a3be03c5-e275-4860-8da2-d11ceb8b549f",
              "parentUUID": "0a57e3b5-10b8-4507-ae39-ce0e1e316973",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a3be03c5-e275-4860-8da2-d11ceb8b549f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 168877,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}