1. Workflow Metadata
name: Cypress Tests
on: 
  push:
  workflow_dispatch:
- Purpose: 
  - Names the workflow "Cypress Tests"
  - Triggers on push events and manual workflow dispatch

2. Job Configuration
jobs:
  cypress-run:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        browsers: [chrome, firefox]
- Purpose:
  - Uses Ubuntu 24.04 runner
  - Continues other browser tests if one fails
  - Runs tests in parallel for Chrome and Firefox

3. Environment Setup
env:
  NODE_VERSION: 22
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
- Purpose:
  - Sets Node.js to v22 (required by mochawesome-merge@5.0.0)
  - Defines custom Cypress cache location

4. Checkout Code
- name: Checkout
  uses: actions/checkout@v4
- What it does:
  - Checks out repository code into the runner

5. Node.js Setup with Caching
- name: Setup Node.js
  uses: actions/setup-node@v4
  with:
    node-version: ${{ env.NODE_VERSION }}
    cache: 'npm'
- Key Features:
  - Installs Node.js v22
  - Automatic npm caching based on package-lock.json

6. Enhanced npm Caching
- name: Cache npm dependencies
  uses: actions/cache@v4
  id: npm-cache
  with:
    path: |
      ~/.npm
      node_modules
    key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
- Why this matters:
  - Creates secondary cache for npm directories
  - Cache key changes only when package-lock.json changes
  - Allows checking cache status via npm-cache id

7. Conditional Dependency Installation
- name: Install dependencies
  if: steps.npm-cache.outputs.cache-hit != 'true'
  run: |
    npm ci
    npm install mochawesome mochawesome-merge mochawesome-report-generator
- Smart Optimization:
  - Only runs if cache was missed
  - Uses npm ci for clean, reliable installs
  - Installs additional reporters

8. Cypress Binary Caching
- name: Cache Cypress
  uses: actions/cache@v4
  id: cypress-cache
  with:
    path: ~/.cache/Cypress
    key: ${{ runner.os }}-cypress-${{ hashFiles('**/package-lock.json') }}
- Purpose:
  - Caches large Cypress binaries (~500MB)
  - Saves 1-2 minutes per run

9. Cypress Verification
- name: Verify Cypress
  run: npx cypress verify
- Why needed:
  - Ensures Cypress is properly installed
  - Runs quickly when binary is cached

10. Test Execution
- name: Cypress run
  run: |
    npx cypress run \
      --browser ${{ matrix.browsers }} \
      --reporter mochawesome \
      --reporter-options "..."
- Key Points:
  - Runs tests in specified browser
  - Uses Mochawesome reporter with JSON output

11. Report Processing
- name: Merge Mochawesome Reports
  if: always()
  run: npx mochawesome-merge...
- name: Generate HTML Reports
  if: always()
  run: npx marge...
- Features:
  - Runs even if tests fail
  - Combines JSON reports and generates HTML

12. Artifact Upload
- name: Upload HTML Reports
  uses: actions/upload-artifact@v4
  with:
    name: ${{ matrix.browsers }}-test-report
    path: cypress/reports/...
- Result:
  - Saves HTML reports as downloadable artifacts

Cache Flow Explained:
1. First run:
   - Fresh installation of all dependencies
   - Creates cache entries
2. Subsequent runs:
   - Restores from cache
   - Skips installation if nothing changed
3. When package-lock.json changes:
   - Automatically invalidates cache
   - Triggers fresh installation

This optimization reduces average workflow runtime by:
- Avoiding redundant dependency installations
- Caching large binary files
- Only running expensive operations when necessary