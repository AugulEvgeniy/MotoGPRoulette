{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-10T13:22:44.626Z",
    "end": "2025-06-10T13:23:55.542Z",
    "duration": 70916,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "16b30a23-f9e8-42f8-8171-5749ec0416b1",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Spins\\3. bonus + autospin_stop_on_bonus_feature.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Spins\\3. bonus + autospin_stop_on_bonus_feature.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1afc93e2-23b9-426c-a818-28eb28107479",
          "title": "Autospin stops on Bonus Feature and Bonus Round is played without issues with extra spins",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should check that \"Spins Left\" counter updates correctly, correct multipliers are displayed, total winnings updates correctly, autospin does not continue after Bonus Round",
              "fullTitle": "Autospin stops on Bonus Feature and Bonus Round is played without issues with extra spins Should check that \"Spins Left\" counter updates correctly, correct multipliers are displayed, total winnings updates correctly, autospin does not continue after Bonus Round",
              "timedOut": null,
              "duration": 68498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.intercept('startgame', {\n  fixture: 'extra_spins_roulette.json'\n}).as('startGame');\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const start_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\n// cy.get('#open_button').click()\n// cy.get('#chip').select(2)\n// cy.get('#open_button').click({force: true})\n// cy.get('#win_bonus_button')\n// cy.get('#set_state').click()\n// cy.get('#close_button').click()\ncy.window().should(win => {\n  const chip = win.game.scene.scenes[1].gameContainer.betPanel.activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.stakeSelector.list[1].list[0].emit('pointerdown');\n});\ncy.wait(100);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.startGroupButtons.autoplayButton.emit('pointerdown');\n});\ncy.wait(600);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.list[2].list[0].emit('pointerdown');\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.sliderButton.emit('pointerdown');\n});\ncy.wait(200);\ncy.window().then(win => {\n  win.game.scene.scenes[1].gameContainer.autoplaySpinsSelect.startSpinsButton.list[0].emit('pointerdown');\n});\n// 10\ncy.wait('@startGame', {\n  timeout: 10000\n}).its('response.body').then(body => {\n  try {\n    expect(body.gameResult.stakePence).to.equal(100);\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: stakePence is 100\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\nlet responses = [];\nconst urlPrefix = 'https://video.highlight.games/mp4med/mgp/vid-mgp-';\ncy.intercept(urlPrefix + '*', req => {\n  req.continue(res => {\n    responses.push({\n      url: res.url,\n      headers: res.headers\n    });\n  });\n}).as('videoRequest');\ncy.wait('@videoRequest', {\n  timeout: 15000\n}).then(() => {\n  cy.wrap(null, {\n    timeout: 15000\n  }).should(() => {\n    const matching = responses.filter(r => r.url.startsWith(urlPrefix));\n    expect(matching).to.have.length(8);\n    matching.forEach(r => {\n      const contentLength = Number(r.headers['content-length']);\n      expect(contentLength, 'Video size').to.be.greaterThan(400000);\n    });\n  });\n});\ncy.wait(150);\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[2].list[2].text, 'Spin count is 9').to.equal('9');\n    expect(win.game.scene.scenes[1].gameContainer.roulette.list[1].visible, 'Stop auto button is visible').to.be.true;\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Spin count is 9\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 20000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(win_banner).to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.topPanel.balance, 'Balance is updated').to.not.equal(100000);\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Balance does not equal 1000\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-sbdjjc2y9aijdv1.mp4\").as(\"video_1\")\n// cy.wait('@video_1', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('NO WIN');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.visible, 'No multipliers are visible').to.be.false;\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: No multipliers are visible on NO WIN\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `No multipliers are visible on NO WIN, Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '6 SPINS LEFT').to.include('6 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 6 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-0UAjR0IxGXaepEh.mp4\").as(\"video_2\")\n// cy.wait('@video_2', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £1.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 1').to.equal('1');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 1\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Multiplier is 1, Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 1.00').to.equal('TOTAL WINNINGS £1.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Total Winnings is 1.00\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '5 SPINS LEFT').to.include('5 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 5 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-DrJvPC37x6Hthtw.mp4\").as(\"video_3\")\n// cy.wait('@video_3', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const extra_spins = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(extra_spins).to.equal('EXTRA SPINS');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, '+3').to.equal('+3');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is +3\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '7 SPINS LEFT').to.include('7 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 7 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-JXOleCtxAVe4KmW.mp4\").as(\"video_4\")\n// cy.wait('@video_4', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £5.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 5').to.equal('5');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 5\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 6.00').to.equal('TOTAL WINNINGS £6.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Total Winnings is 6.00\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '6 SPINS LEFT').to.include('6 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 6 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-x96MCwcI6FE7Ng1.mp4\").as(\"video_5\")\n// cy.wait('@video_5', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £7.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 7').to.equal('7');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 7\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 13.00').to.equal('TOTAL WINNINGS £13.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Total Winnings is 13.00\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '5 SPINS LEFT').to.include('5 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 5 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-OvgfVw5WdaEYO80.mp4\").as(\"video_6\")\n// cy.wait('@video_6', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('NO WIN');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.visible, 'No multipliers are visible').to.be.false;\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: No multipliers are visible on NO WIN\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: on NO WIN ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '4 SPINS LEFT').to.include('4 SPINS LEFT');\n    cy.task(\"logCatch\", `4 SPINS LEFT`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-1lfA4S2bTVQ5p4D.mp4\").as(\"video_7\")\n// cy.wait('@video_7', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £4.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 4').to.equal('4');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 4\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 17.00').to.equal('TOTAL WINNINGS £17.00');\n    cy.task(\"logCatch\", `Total winnings is 17.00`);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '3 SPINS LEFT').to.include('3 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 3 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\n// cy.intercept(\"https://video.highlight.games/mp4med/mgp/vid-mgp-Ij3x4mqgaH8eQWf.mp4\").as(\"video_8\")\n// cy.wait('@video_8', { timeout: 20000 })\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £3.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 3').to.equal('3');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 3\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 20.00').to.equal('TOTAL WINNINGS £20.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Total Winnings is 20.00\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '2 SPINS LEFT').to.include('2 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 2 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const bonus_no_win = win.game.scene.scenes[1].gameContainer.videoPopup.winText.text;\n  expect(bonus_no_win).to.equal('WIN £2.00');\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.multiplierText.text, 'Multiplier is 2').to.equal('2');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Multiplier is 2\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.list[3].text, 'Total winnings is 22').to.equal('TOTAL WINNINGS £22.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Total Winnings is 22\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.videoPopup.spinsLeft.text, '1 SPINS LEFT').to.include('1 SPINS LEFT');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: 1 SPINS LEFT\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window({\n  timeout: 40000\n}).should(win => {\n  const win_banner = win.game.scene.scenes[1].gameContainer.winBanner.visible;\n  expect(win_banner, 'win banner is displayed').to.be.true;\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.winBanner.list[3].text, 'You Have Won 22.00').to.equal('£22.00');\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: You Have Won 22.00\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.window().then(win => {\n  try {\n    expect(win.game.scene.scenes[1].gameContainer.topPanel.balance, 'Balance is updated').to.equal(104900);\n    cy.task(\"logCatch\", {\n      message: \"✅ Assertion Passed: Balance does not equal 1000\"\n    });\n  } catch (err) {\n    cy.task(\"logCatch\", `Assertion Failed: ${err.message}`);\n  }\n});\ncy.wait(2500);\ncy.window({\n  timeout: 60000\n}).should(win => {\n  const autospin_button = win.game.scene.scenes[1].gameContainer.startGroupButtons.autoplayButton.visible;\n  const isAutoplay = win.game.scene.scenes[1].gameContainer.roulette.isAutoplay;\n  expect(autospin_button, 'Autospin button is visible').to.be.true;\n  expect(isAutoplay, 'isAutoplay: false').to.be.false;\n});",
              "err": {},
              "uuid": "67e91a2a-dacc-4dbb-897a-ef856a0f3c1b",
              "parentUUID": "1afc93e2-23b9-426c-a818-28eb28107479",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67e91a2a-dacc-4dbb-897a-ef856a0f3c1b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 68498,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}