{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2025-06-02T09:01:19.321Z",
    "end": "2025-06-02T09:02:32.642Z",
    "duration": 73321,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "53c84406-bc92-4556-8307-46ce51a78423",
      "title": "",
      "fullFile": "cypress\\e2e\\MotoGPRoulette\\Stakes\\1. straight_bets.cy.js",
      "file": "cypress\\e2e\\MotoGPRoulette\\Stakes\\1. straight_bets.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "68c6ec32-4a60-4ba6-b5a2-88db77cbf098",
          "title": "All stake objects are sent and validated. Total Bet value and Balance updates correctly in UI",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "\"type\": \"straight\", 185 stake objects with every stake value)",
              "fullTitle": "All stake objects are sent and validated. Total Bet value and Balance updates correctly in UI \"type\": \"straight\", 185 stake objects with every stake value)",
              "timedOut": null,
              "duration": 69041,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visitTestEnvironment();\ncy.interceptStartGame();\ncy.window({\n  timeout: 50000\n}).should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const start_button = scene.gameContainer.list[5].list[0].visible;\n  expect(start_button, 'Game is loaded').to.be.true;\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.list[7].list[1].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_0\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  cy.wait(1000);\n  scene.gameContainer.list[4].list[0].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[2].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[3].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[4].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[5].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[6].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[7].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[8].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[9].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[10].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[11].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[12].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[13].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[14].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[15].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[16].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[17].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[18].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[19].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[20].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[21].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[22].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[23].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[24].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[25].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[26].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[27].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[28].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[29].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[30].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[31].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[32].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[33].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[34].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[35].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[36].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  try {\n    expect(scene.gameContainer.betPanel.list[9].text).to.include(3.70);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n  // This assertion checks total bet value\n  scene.gameContainer.list[7].list[2].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_1\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.list[4].list[0].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[2].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[3].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[4].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[5].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[6].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[7].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[8].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[9].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[10].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[11].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[12].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[13].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[14].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[15].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[16].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[17].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[18].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[19].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[20].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[21].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[22].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[23].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[24].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[25].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[26].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[27].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[28].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[29].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[30].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[31].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[32].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[33].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[34].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[35].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[36].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  try {\n    expect(scene.gameContainer.betPanel.list[9].text).to.include(22.2);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n  // This assertion checks total bet value\n  scene.gameContainer.list[7].list[3].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_2\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.list[4].list[0].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[2].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[3].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[4].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[5].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[6].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[7].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[8].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[9].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[10].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[11].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[12].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[13].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[14].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[15].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[16].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[17].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[18].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[19].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[20].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[21].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[22].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[23].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[24].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[25].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[26].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[27].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[28].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[29].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[30].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[31].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[32].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[33].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[34].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[35].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[36].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  try {\n    expect(scene.gameContainer.betPanel.list[9].text).to.include(59.2);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n  scene.gameContainer.list[7].list[4].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_3\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.list[4].list[0].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[2].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[3].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[4].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[5].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[6].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[7].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[8].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[9].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[10].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[11].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[12].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[13].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[14].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[15].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[16].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[17].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[18].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[19].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[20].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[21].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[22].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[23].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[24].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[25].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[26].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[27].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[28].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[29].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[30].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[31].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[32].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[33].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[34].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[35].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[36].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  try {\n    expect(scene.gameContainer.betPanel.list[9].text).to.include(244.2);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n  scene.gameContainer.list[7].list[5].list[0].emit('pointerdown');\n});\ncy.window().should(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  const chip = scene.gameContainer.list[7].activeButton.layout.name;\n  expect(chip).to.include(\"chip_4\");\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  scene.gameContainer.list[4].list[0].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[1].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[2].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[3].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[4].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[5].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[6].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[7].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[8].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[9].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[10].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[11].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[12].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[13].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[14].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[15].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[16].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[17].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[18].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[19].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[20].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[21].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[22].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[23].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[24].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[25].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[26].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[27].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[28].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[29].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[30].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[31].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[32].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[33].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[34].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[35].list[0].emit('pointerdown');\n  scene.gameContainer.list[4].list[36].list[0].emit('pointerdown');\n  cy.wait(300);\n  scene.gameContainer.list[5].list[0].emit('pointerdown');\n});\ncy.window().then(win => {\n  const game = win.game;\n  const scene = game.scene.scenes[1];\n  try {\n    expect(scene.gameContainer.betPanel.list[9].text).to.include(614.2);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n});\ncy.wait('@startGame', {\n  timeout: 25000\n}).its('response.body').then(body => {\n  cy.log('startGame response:', body);\n  cy.window().should(body => {\n    expect(body).to.have.property('gameResult');\n    expect(body).to.have.property('integrationResultData');\n    expect(body).to.have.property('upstream');\n  });\n  if (body.state == \"INVALID\") {\n    throw new Error(`API returned INVALID state. Full response: ${JSON.stringify(body)}`);\n  }\n  cy.window().then(win => {\n    const game = win.game;\n    const scene = game.scene.scenes[1];\n    try {\n      expect(scene.gameContainer.topPanel.balance).to.not.equal(100000);\n    } catch (err) {\n      cy.log('Assertion failed:', err.message);\n    }\n  });\n  try {\n    expect(body.integrationResultData.stakes).to.have.length(185);\n  } catch (err) {\n    cy.log('Assertion failed:', err.message);\n  }\n  const cellCounts = {};\n  const cellAmounts = {}; // To track amounts for each cell\n  // Initialize counts and amounts for all cells 0-36\n  for (let i = 0; i <= 36; i++) {\n    cellCounts[i] = 0;\n    cellAmounts[i] = [];\n  }\n  // Count stakes and collect amounts for each cell\n  stakes.forEach(stake => {\n    expect(stake.type, 'All stakes should have type \"straight\"').to.equal('straight');\n    stake.cells.forEach(cell => {\n      if (cell >= 0 && cell <= 36) {\n        cellCounts[cell]++;\n        const amountGBP = stake.amountsPence;\n        cellAmounts[cell].push(amountGBP);\n      }\n    });\n  });\n  // Expected amounts\n  const expectedAmounts = [10, 50, 100, 500, 1000];\n  // Verify each cell has exactly 5 stakes with the correct amounts\n  for (let cell = 0; cell <= 36; cell++) {\n    // expect(cellCounts[cell], `Cell ${cell} should have exactly 5 stakes`).to.equal(5);\n    // Check that the amounts match exactly the expected amounts\n    expect(cellAmounts[cell].sort((a, b) => a - b), `Cell ${cell} should have stakes with amounts 0.1, 0.5, 1, 5, 10 GBP`).to.deep.equal(expectedAmounts.sort((a, b) => a - b));\n  }\n});",
              "err": {
                "message": "Error: API returned INVALID state. Full response: {\"state\":\"INVALID\",\"gameResult\":{\"gameInstanceId\":0,\"stakePence\":0,\"totalWinPence\":0,\"decimalOdds\":0},\"wagerNumber\":0,\"operationResult\":1000,\"message\":\"61420 is not a valid stake\"}",
                "estack": "Error: API returned INVALID state. Full response: {\"state\":\"INVALID\",\"gameResult\":{\"gameInstanceId\":0,\"stakePence\":0,\"totalWinPence\":0,\"decimalOdds\":0},\"wagerNumber\":0,\"operationResult\":1000,\"message\":\"61420 is not a valid stake\"}\n    at Context.eval (webpack://test/./cypress/e2e/MotoGPRoulette/Stakes/1. straight_bets.cy.js:364:18)\n    at getRet (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119619:20)\n    at tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)\n    at Promise.attempt.Promise.try (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:4285:29)\n    at Context.thenFn (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119630:66)\n    at Context.then (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:119881:21)\n    at wrapped (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:140158:19)\n    at <unknown> (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:146103:15)\n    at tryCatcher (http://highlight.spinberry.com/__cypress/runner/cypress_runner.js:1777:23)",
                "diff": null
              },
              "uuid": "a261119c-2ce0-4cd1-926c-e3e47ae31bac",
              "parentUUID": "68c6ec32-4a60-4ba6-b5a2-88db77cbf098",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "a261119c-2ce0-4cd1-926c-e3e47ae31bac"
          ],
          "pending": [],
          "skipped": [],
          "duration": 69041,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/chrome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}